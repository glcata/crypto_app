/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crypto.simple_forms;

import crypto.encrypt.x509Generator_sign;
import crypto.helper.configApp;
import crypto.helper.helper;
import de.javasoft.plaf.synthetica.SyntheticaBlackEyeLookAndFeel;

import javax.swing.*;
import java.text.ParseException;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.DataFormatException;

/**
 *
 * @author Catalin Glavan
 */
public class createKey extends javax.swing.JFrame implements helper {

    private String location;

    public createKey(ResourceBundle bundle) {
        this.bundle = bundle;
        initComponents();
        super.setIconImage(new ImageIcon(getClass().getResource(config.getIconPath())).getImage());
        jkey_gen.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createKey_bg1 = new crypto.helper.createKey_bg();
        back = new javax.swing.JButton();
        jtitle = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jcountry = new javax.swing.JLabel();
        jstate = new javax.swing.JLabel();
        jlocation = new javax.swing.JLabel();
        jorg = new javax.swing.JLabel();
        jorg_unit = new javax.swing.JLabel();
        jcommon_name = new javax.swing.JLabel();
        jemail_address = new javax.swing.JLabel();
        jcommon_name_txt = new javax.swing.JTextField();
        jcountry_txt = new javax.swing.JTextField();
        jstate_txt = new javax.swing.JTextField();
        jlocation_txt = new javax.swing.JTextField();
        jorg_txt = new javax.swing.JTextField();
        jorg_unit_txt = new javax.swing.JTextField();
        jemail_txt = new javax.swing.JTextField();
        jbox_pks = new javax.swing.JCheckBox();
        jlabel_pks = new javax.swing.JLabel();
        jkey_gen = new javax.swing.JButton();
        jcommon_name_check = new javax.swing.JLabel();
        jcountry_check = new javax.swing.JLabel();
        jstate_check = new javax.swing.JLabel();
        jlocation_check = new javax.swing.JLabel();
        jorg_check = new javax.swing.JLabel();
        jorg_unit_check = new javax.swing.JLabel();
        jemail_check = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("key_title")
        );

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/back_cert.png"))); // NOI18N
        back.setBorder(null);
        back.setFocusable(false);
        back.setBorderPainted(false);
        back.setPreferredSize(new java.awt.Dimension(40, 40));
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jtitle.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jtitle.setText(bundle.getString("key_create"));

        javax.swing.GroupLayout createKey_bg1Layout = new javax.swing.GroupLayout(createKey_bg1);
        createKey_bg1.setLayout(createKey_bg1Layout);
        createKey_bg1Layout.setHorizontalGroup(
            createKey_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createKey_bg1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        createKey_bg1Layout.setVerticalGroup(
            createKey_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createKey_bg1Layout.createSequentialGroup()
                .addGap(0, 80, Short.MAX_VALUE)
                .addGroup(createKey_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(createKey_bg1, java.awt.BorderLayout.NORTH);

        jcountry.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jcountry.setText(bundle.getString("key_C"));

        jstate.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jstate.setText(bundle.getString("key_ST"));

        jlocation.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jlocation.setText(bundle.getString("key_L"));

        jorg.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jorg.setText(bundle.getString("key_O"));

        jorg_unit.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jorg_unit.setText(bundle.getString("key_OU"));

        jcommon_name.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jcommon_name.setText(bundle.getString("key_CN"));

        jemail_address.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jemail_address.setText(bundle.getString("key_emailAddress"));

        jcommon_name_txt.setColumns(14);
        jcommon_name_txt.setName("common_name_id"); // NOI18N
        jcommon_name_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jcommon_name_txtFocusGained(evt);
            }
        });
        jcommon_name_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jcommon_name_txtKeyReleased(evt);
            }
        });

        jcountry_txt.setColumns(14);
        jcountry_txt.setName("country_id"); // NOI18N
        jcountry_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jcountry_txtFocusGained(evt);
            }
        });
        jcountry_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jcountry_txtKeyReleased(evt);
            }
        });

        jstate_txt.setColumns(14);
        jstate_txt.setName("state_id"); // NOI18N
        jstate_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jstate_txtFocusGained(evt);
            }
        });
        jstate_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jstate_txtKeyReleased(evt);
            }
        });

        jlocation_txt.setColumns(14);
        jlocation_txt.setName("location_id"); // NOI18N
        jlocation_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jlocation_txtFocusGained(evt);
            }
        });
        jlocation_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jlocation_txtKeyReleased(evt);
            }
        });

        jorg_txt.setColumns(14);
        jorg_txt.setName("org_id"); // NOI18N
        jorg_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jorg_txtFocusGained(evt);
            }
        });
        jorg_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jorg_txtKeyReleased(evt);
            }
        });

        jorg_unit_txt.setColumns(14);
        jorg_unit_txt.setName("org_unit_id"); // NOI18N
        jorg_unit_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jorg_unit_txtFocusGained(evt);
            }
        });
        jorg_unit_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jorg_unit_txtKeyReleased(evt);
            }
        });

        jemail_txt.setColumns(14);
        jemail_txt.setName("email_id"); // NOI18N
        jemail_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jemail_txtFocusGained(evt);
            }
        });
        jemail_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jemail_txtKeyReleased(evt);
            }
        });

        jlabel_pks.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jlabel_pks.setText(bundle.getString("key_generator"));
        jlabel_pks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlabel_pksMouseClicked(evt);
            }
        });

        jkey_gen.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jkey_gen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/id_verified.png"))); // NOI18N
        jkey_gen.setText(bundle.getString("key_gen"));
        jkey_gen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jkey_genActionPerformed(evt);
            }
        });

        jcommon_name_check.setPreferredSize(new java.awt.Dimension(20, 20));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jemail_address)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jemail_txt))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jorg)
                                    .addComponent(jorg_unit)
                                    .addComponent(jlocation)
                                    .addComponent(jstate)
                                    .addComponent(jcountry)
                                    .addComponent(jcommon_name))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jcountry_txt)
                                    .addComponent(jstate_txt)
                                    .addComponent(jlocation_txt)
                                    .addComponent(jorg_unit_txt)
                                    .addComponent(jorg_txt)
                                    .addComponent(jcommon_name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcountry_check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jstate_check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlocation_check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jorg_check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jorg_unit_check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jemail_check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcommon_name_check, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jbox_pks)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jkey_gen))
                            .addComponent(jlabel_pks))))
                .addGap(28, 28, 28))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcommon_name_txt)
                        .addComponent(jcommon_name_check, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jcommon_name, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jcountry_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcountry, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcountry_check, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jstate_check, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jstate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jstate_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlocation_check, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlocation)
                        .addComponent(jlocation_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jorg_check, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jorg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jorg_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jorg_unit_check, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jorg_unit, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jorg_unit_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jemail_check, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jemail_address, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jemail_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlabel_pks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbox_pks))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jkey_gen)
                .addContainerGap())
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jkey_genActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jkey_genActionPerformed
        if (evt.getSource() == jkey_gen) {
            try {
                common_name = new crypto.helper.validate(jcommon_name_txt, jcommon_name_txt.getText(), null, null).getVal();
                country = new crypto.helper.validate(jcountry_txt, jcountry_txt.getText(), null, null).getVal();
                state = new crypto.helper.validate(jstate_txt, jstate_txt.getText(), null, null).getVal();
                loc = new crypto.helper.validate(jlocation_txt, jlocation_txt.getText(), null, null).getVal();
                org = new crypto.helper.validate(jorg_txt, jorg_txt.getText(), null, null).getVal();
                org_unit = new crypto.helper.validate(jorg_unit_txt, jorg_unit_txt.getText(), null, null).getVal();
                email = new crypto.helper.validate(jemail_txt, jemail_txt.getText(), null, null).getVal();

                if (common_name && country && state && loc && org && org_unit && email) {

                    JFileChooser chooser = new JFileChooser();
                    chooser.setCurrentDirectory(new java.io.File("user.dir"));
                    chooser.setDialogTitle("Save AS");
                    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                    //chooser.setAcceptAllFileFilterUsed(false);

                    String password = null;
                    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                        location = chooser.getSelectedFile().toString();
                        if (jbox_pks.isSelected()) {
                            JPasswordField passwordField = new JPasswordField();
                            passwordField.setEchoChar('*');
                            Object[] obj = {bundle.getString("key_password"), passwordField};
                            Object stringArray[] = {bundle.getString("key_y"), bundle.getString("key_n")};
                            if (JOptionPane.showOptionDialog(null, obj, bundle.getString("key_password_title"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, stringArray, obj) == JOptionPane.YES_OPTION) {
                                password = new String(passwordField.getPassword());
                            }
                        }
                        if (location != null && !location.isEmpty()) {
                            new x509Generator_sign(
                                    location,
                                    jcommon_name_txt.getText(),
                                    jcountry_txt.getText(),
                                    jstate_txt.getText(),
                                    jlocation_txt.getText(),
                                    jorg_unit_txt.getText(),
                                    jorg_txt.getText(),
                                    jemail_txt.getText(),
                                    jbox_pks.isSelected(),
                                    password);
                        }
                    }
                } else {
                    throw new DataFormatException();
                }
            } catch (Exception e) {
                e.printStackTrace();
                ImageIcon icon = new ImageIcon(getClass().getResource(config.getIconPath()));
                JOptionPane.showMessageDialog(this, bundle.getString("key_register"), bundle.getString("key_register_title"), JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }
    }//GEN-LAST:event_jkey_genActionPerformed

    private void jlabel_pksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlabel_pksMouseClicked
        if (evt.getSource() == jlabel_pks) {
            if (!jbox_pks.isSelected()) {
                jbox_pks.setSelected(true);
            } else {
                jbox_pks.setSelected(false);
            }
        }
    }//GEN-LAST:event_jlabel_pksMouseClicked

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        if (evt.getSource() == back) {
            super.dispose();
        }
    }//GEN-LAST:event_backActionPerformed

    private void jcommon_name_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcommon_name_txtKeyReleased
        if (evt.getSource() == jcommon_name_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jcommon_name_txt, jcommon_name_txt.getText(), null, bundle);
            labelCheck(jcommon_name_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jcommon_name_txtKeyReleased

    private void jcountry_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcountry_txtKeyReleased
        if (evt.getSource() == jcountry_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jcountry_txt, jcountry_txt.getText(), null, bundle);
            labelCheck(jcountry_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jcountry_txtKeyReleased

    private void jstate_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jstate_txtKeyReleased
        if (evt.getSource() == jstate_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jstate_txt, jstate_txt.getText(), null, bundle);
            labelCheck(jstate_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jstate_txtKeyReleased

    private void jlocation_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jlocation_txtKeyReleased
        if (evt.getSource() == jlocation_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jlocation_txt, jlocation_txt.getText(), null, bundle);
            labelCheck(jlocation_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jlocation_txtKeyReleased

    private void jorg_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jorg_txtKeyReleased
        if (evt.getSource() == jorg_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jorg_txt, jorg_txt.getText(), null, bundle);
            labelCheck(jorg_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jorg_txtKeyReleased

    private void jorg_unit_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jorg_unit_txtKeyReleased
        if (evt.getSource() == jorg_unit_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jorg_unit_txt, jorg_unit_txt.getText(), null, bundle);
            labelCheck(jorg_unit_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jorg_unit_txtKeyReleased

    private void jemail_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jemail_txtKeyReleased
        if (evt.getSource() == jemail_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jemail_txt, jemail_txt.getText(), null, bundle);
            labelCheck(jemail_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jemail_txtKeyReleased

    private void jcommon_name_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcommon_name_txtFocusGained
        if (evt.getSource() == jcommon_name_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jcommon_name_txt, jcommon_name_txt.getText(), null, bundle);
            labelCheck(jcommon_name_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jcommon_name_txtFocusGained

    private void jcountry_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcountry_txtFocusGained
        if (evt.getSource() == jcountry_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jcountry_txt, jcountry_txt.getText(), null, bundle);
            labelCheck(jcountry_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jcountry_txtFocusGained

    private void jstate_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jstate_txtFocusGained
        if (evt.getSource() == jstate_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jstate_txt, jstate_txt.getText(), null, bundle);
            labelCheck(jstate_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jstate_txtFocusGained

    private void jlocation_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jlocation_txtFocusGained
        if (evt.getSource() == jlocation_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jlocation_txt, jlocation_txt.getText(), null, bundle);
            labelCheck(jlocation_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jlocation_txtFocusGained

    private void jorg_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jorg_txtFocusGained
        if (evt.getSource() == jorg_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jorg_txt, jorg_txt.getText(), null, bundle);
            labelCheck(jorg_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jorg_txtFocusGained

    private void jorg_unit_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jorg_unit_txtFocusGained
        if (evt.getSource() == jorg_unit_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jorg_unit_txt, jorg_unit_txt.getText(), null, bundle);
            labelCheck(jorg_unit_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jorg_unit_txtFocusGained

    private void jemail_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jemail_txtFocusGained
        if (evt.getSource() == jemail_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(jemail_txt, jemail_txt.getText(), null, bundle);
            labelCheck(jemail_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_jemail_txtFocusGained

    private void labelCheck(JLabel label, boolean set, String tooltip) {

        String icon = set ? "/crypto/images/simple_forms/check_20.png" : "/crypto/images/simple_forms/uncheck_20.png";
        label.setIcon(new ImageIcon(getClass().getResource(icon)));
        label.setToolTipText(tooltip);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
             */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(createKey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(createKey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(createKey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(createKey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            //</editor-fold>

            /* Create and display the form */
            javax.swing.UIManager.setLookAndFeel(new SyntheticaBlackEyeLookAndFeel());
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    final Locale RO = new Locale("ro", "Romania");
                    final Locale EN = new Locale("en", "US");
                    ResourceBundle bundle = ResourceBundle.getBundle("crypto/helper/lang_en", EN);
                    new createKey(bundle).setVisible(true);
                }
            });
        } catch (UnsupportedLookAndFeelException | ParseException ex) {
            Logger.getLogger(createKey.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
    }

    private final configApp config = new configApp();
    private static ResourceBundle bundle;
    private boolean common_name = false, country = false, state = false, loc = false, org = false, org_unit = false, email = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private crypto.helper.createKey_bg createKey_bg1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JCheckBox jbox_pks;
    private javax.swing.JLabel jcommon_name;
    private javax.swing.JLabel jcommon_name_check;
    private javax.swing.JTextField jcommon_name_txt;
    private javax.swing.JLabel jcountry;
    private javax.swing.JLabel jcountry_check;
    private javax.swing.JTextField jcountry_txt;
    private javax.swing.JLabel jemail_address;
    private javax.swing.JLabel jemail_check;
    private javax.swing.JTextField jemail_txt;
    private javax.swing.JButton jkey_gen;
    private javax.swing.JLabel jlabel_pks;
    private javax.swing.JLabel jlocation;
    private javax.swing.JLabel jlocation_check;
    private javax.swing.JTextField jlocation_txt;
    private javax.swing.JLabel jorg;
    private javax.swing.JLabel jorg_check;
    private javax.swing.JTextField jorg_txt;
    private javax.swing.JLabel jorg_unit;
    private javax.swing.JLabel jorg_unit_check;
    private javax.swing.JTextField jorg_unit_txt;
    private javax.swing.JLabel jstate;
    private javax.swing.JLabel jstate_check;
    private javax.swing.JTextField jstate_txt;
    private javax.swing.JLabel jtitle;
    // End of variables declaration//GEN-END:variables

    @Override
    public void check_store(String path) {
    }

    @Override
    public void reset_store() {
    }
}
