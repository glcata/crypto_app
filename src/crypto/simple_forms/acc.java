/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crypto.simple_forms;

import crypto.encrypt.encrypt;
import crypto.helper.configApp;
import crypto.helper.dragDrop_listener;
import crypto.helper.helper;
import de.javasoft.plaf.synthetica.SyntheticaBlackEyeLookAndFeel;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.dnd.DropTarget;
import java.text.ParseException;
import java.util.EmptyStackException;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.DataFormatException;

/**
 *
 * @author Catalin Glavan
 */
public class acc extends javax.swing.JFrame implements helper {

    public acc(Point location, ResourceBundle bundle) {
        this.bundle = bundle;
        initComponents();
        key_store.requestFocus();

        super.setIconImage(new ImageIcon(getClass().getResource(config.getIconPath())).getImage());

        checkLocation(location);
        closeWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createAcc_bg1 = new crypto.helper.createAcc_bg();
        back = new javax.swing.JButton();
        jtitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        name_txt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        email_txt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        re_email_txt = new javax.swing.JTextField();
        captcha_form = new crypto.captcha.captcha_form();
        captcha_txt = new javax.swing.JTextField();
        key_store = new javax.swing.JButton();
        jcreate_key = new javax.swing.JButton();
        jrefresh_captcha = new javax.swing.JButton();
        key = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jbox_agree = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        sign_up = new javax.swing.JButton();
        name_check = new javax.swing.JLabel();
        email_check = new javax.swing.JLabel();
        re_email_check = new javax.swing.JLabel();
        captcha_check = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(bundle.getString("key_acc_title")
        );
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridLayout(0, 1));

        createAcc_bg1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                createAcc_bg1AncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/back_off.png"))); // NOI18N
        back.setBorder(null);
        back.setFocusable(false);
        back.setBorderPainted(false);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jtitle.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jtitle.setText(bundle.getString("key_acc"));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel1.setText(bundle.getString("key_acc_user"));

        name_txt.setColumns(14);
        name_txt.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        name_txt.setName("name_id"); // NOI18N
        name_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                name_txtFocusGained(evt);
            }
        });
        name_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                name_txtKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel2.setText(bundle.getString("key_acc_email"));

        email_txt.setColumns(14);
        email_txt.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        email_txt.setName("email_id"); // NOI18N
        email_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                email_txtFocusGained(evt);
            }
        });
        email_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                email_txtKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel3.setText(bundle.getString("key_acc_confirmemail"));

        re_email_txt.setColumns(14);
        re_email_txt.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        re_email_txt.setName("re_email_id"); // NOI18N
        re_email_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                re_email_txtFocusGained(evt);
            }
        });
        re_email_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                re_email_txtKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout captcha_formLayout = new javax.swing.GroupLayout(captcha_form);
        captcha_form.setLayout(captcha_formLayout);
        captcha_formLayout.setHorizontalGroup(
            captcha_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 125, Short.MAX_VALUE)
        );
        captcha_formLayout.setVerticalGroup(
            captcha_formLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        captcha_txt.setColumns(8);
        captcha_txt.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        captcha_txt.setName("captcha_id"); // NOI18N
        captcha_txt.setPreferredSize(new java.awt.Dimension(110, 30));
        captcha_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                captcha_txtFocusGained(evt);
            }
        });
        captcha_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                captcha_txtKeyReleased(evt);
            }
        });

        key_store.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/inputs.png"))); // NOI18N
        key_store.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                key_storeActionPerformed(evt);
            }
        });
        dragDrop_listener drag_and_drop = new dragDrop_listener(this);
        new DropTarget(key_store, drag_and_drop);

        jcreate_key.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jcreate_key.setText(bundle.getString("key_acc_createkey"));
        jcreate_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcreate_keyActionPerformed(evt);
            }
        });

        jrefresh_captcha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/refresh_captcha.png"))); // NOI18N
        jrefresh_captcha.setBorder(null);
        jrefresh_captcha.setBorderPainted(false);
        jrefresh_captcha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrefresh_captchaActionPerformed(evt);
            }
        });

        key.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/key.png"))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        jLabel5.setText(bundle.getString("key_acc_iagree3"));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        jLabel4.setText(bundle.getString("key_acc_iagree"));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 102, 255));
        jButton2.setText(bundle.getString("key_acc_iagree2"));
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);

        jButton3.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 102, 255));
        jButton3.setText(bundle.getString("key_acc_iagree4"));
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);

        sign_up.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        sign_up.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/sign_up.png"))); // NOI18N
        sign_up.setText(bundle.getString("key_acc_signup"));
        sign_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sign_upActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout createAcc_bg1Layout = new javax.swing.GroupLayout(createAcc_bg1);
        createAcc_bg1.setLayout(createAcc_bg1Layout);
        createAcc_bg1Layout.setHorizontalGroup(
            createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createAcc_bg1Layout.createSequentialGroup()
                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createAcc_bg1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbox_agree, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(createAcc_bg1Layout.createSequentialGroup()
                                .addComponent(key)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(key_store)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcreate_key))
                            .addGroup(createAcc_bg1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(createAcc_bg1Layout.createSequentialGroup()
                                .addComponent(jrefresh_captcha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(captcha_form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(captcha_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(captcha_check))))
                    .addGroup(createAcc_bg1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(createAcc_bg1Layout.createSequentialGroup()
                                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(createAcc_bg1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(createAcc_bg1Layout.createSequentialGroup()
                                        .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(email_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(re_email_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(name_check)
                                    .addComponent(email_check)
                                    .addComponent(re_email_check)))
                            .addGroup(createAcc_bg1Layout.createSequentialGroup()
                                .addComponent(back)
                                .addGap(84, 84, 84)
                                .addComponent(jtitle)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createAcc_bg1Layout.createSequentialGroup()
                .addComponent(sign_up, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );
        createAcc_bg1Layout.setVerticalGroup(
            createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createAcc_bg1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(97, 97, 97)
                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name_check, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(email_check, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(email_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(re_email_check, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(re_email_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(key, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key_store, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jcreate_key, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(captcha_form, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(captcha_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(captcha_check)
                    .addComponent(jrefresh_captcha))
                .addGap(18, 18, 18)
                .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createAcc_bg1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jButton3))
                    .addComponent(jbox_agree, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sign_up, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(createAcc_bg1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createAcc_bg1AncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_createAcc_bg1AncestorMoved
        setPoint = super.getLocation();
    }//GEN-LAST:event_createAcc_bg1AncestorMoved

    private void sign_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sign_upActionPerformed
        if (evt.getSource() == sign_up) {
            try {
                name = new crypto.helper.validate(name_txt, name_txt.getText(), null, null).getVal();
                email = new crypto.helper.validate(name_txt, name_txt.getText(), null, null).getVal();
                re_email = new crypto.helper.validate(name_txt, name_txt.getText(), null, null).getVal();
                captcha = new crypto.helper.validate(name_txt, name_txt.getText(), null, null).getVal();
                if (jbox_agree.isSelected() && name && email && re_email && captcha) {
                    if (location_key != null && !location_key.isEmpty()) {
                        new encrypt(name_txt.getText(),email_txt.getText(), captcha_form.getCaptcha(), location_key);
                        name_txt.setText(null);
                        email_txt.setText(null);
                        re_email_txt.setText(null);
                        captcha_txt.setText(null);
                        name_check.setIcon(null);
                        email_check.setIcon(null);
                        re_email_check.setIcon(null);
                        captcha_check.setIcon(null);
                        key_store.setIcon(new ImageIcon(getClass().getResource("/crypto/images/simple_forms/inputs.png")));
                        key_store.requestFocus();
                    } else {
                        throw new DataFormatException();
                    }
                } else {
                    throw new EmptyStackException();
                }
            } catch (Exception e) {
            //    e.printStackTrace();
                refreshFrame();
                ImageIcon icon = new ImageIcon(getClass().getResource(config.getIconPath()));
                JOptionPane.showMessageDialog(this, bundle.getString("key_register"), bundle.getString("key_register_title"), JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }
    }//GEN-LAST:event_sign_upActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        if (evt.getSource() == jLabel4) {
            if (!jbox_agree.isSelected()) {
                jbox_agree.setSelected(true);
            } else {
                jbox_agree.setSelected(false);
            }
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        if (evt.getSource() == jLabel5) {
            if (!jbox_agree.isSelected()) {
                jbox_agree.setSelected(true);
            } else {
                jbox_agree.setSelected(false);
            }
        }
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jrefresh_captchaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrefresh_captchaActionPerformed
        if (evt.getSource() == jrefresh_captcha) {
            refreshFrame();
        }
    }//GEN-LAST:event_jrefresh_captchaActionPerformed

    private void jcreate_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcreate_keyActionPerformed
        if (evt.getSource() == jcreate_key) {
            int x = super.getX();
            int y = super.getY();
            key_panel = new createKey(bundle);
            key_panel.setLocation(x + 385, y);
            key_panel.setVisible(true);
        }
    }//GEN-LAST:event_jcreate_keyActionPerformed

    private void key_storeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_key_storeActionPerformed
        if (evt.getSource() == key_store) {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Certificate File .crt", "crt");
            chooser.setCurrentDirectory(new java.io.File("user.dir"));
            chooser.setDialogTitle("Choose Digital Certificate");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(true);

            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                location_key = chooser.getSelectedFile().getAbsolutePath();
                String check_crt = location_key.substring(location_key.length() - 3);
                if (check_crt.equals("crt")) {
                    key_store.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/id_verified.png")));
                } else {
                    location_key = null;
                    key_store.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/id_not_verified.png")));
                }
            }
        }
    }//GEN-LAST:event_key_storeActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        if (evt.getSource() == back) {
            super.dispose();
            if (key_panel != null) {
                key_panel.dispose();
            }
            new login(setPoint, bundle).setVisible(true);
        }
    }//GEN-LAST:event_backActionPerformed

    private void name_txtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_name_txtKeyTyped
        if (evt.getSource() == name_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(name_txt, name_txt.getText(), null, bundle);
            labelCheck(name_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_name_txtKeyTyped

    private void captcha_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_captcha_txtKeyReleased
        if (evt.getSource() == captcha_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(captcha_txt, captcha_txt.getText(), captcha_form, bundle);
            labelCheck(captcha_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_captcha_txtKeyReleased

    private void email_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_email_txtKeyReleased
        if (evt.getSource() == email_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(email_txt, email_txt.getText(), null, bundle);
            labelCheck(email_check, validate.getVal(), validate.getTooltip());
            checkReEmail();
        }
    }//GEN-LAST:event_email_txtKeyReleased

    private void re_email_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_re_email_txtKeyReleased
        if (evt.getSource() == re_email_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(re_email_txt, re_email_txt.getText(), null, bundle);
            labelCheck(re_email_check, validate.getVal(), validate.getTooltip());
            checkReEmail();
        }
    }//GEN-LAST:event_re_email_txtKeyReleased

    private void name_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_name_txtFocusGained
        if (evt.getSource() == name_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(name_txt, name_txt.getText(), null, bundle);
            labelCheck(name_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_name_txtFocusGained

    private void email_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_email_txtFocusGained
        if (evt.getSource() == email_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(email_txt, email_txt.getText(), null, bundle);
            labelCheck(email_check, validate.getVal(), validate.getTooltip());
            checkReEmail();
        }
    }//GEN-LAST:event_email_txtFocusGained

    private void re_email_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_re_email_txtFocusGained
        if (evt.getSource() == re_email_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(re_email_txt, re_email_txt.getText(), null, bundle);
            labelCheck(re_email_check, validate.getVal(), validate.getTooltip());
            checkReEmail();
        }
    }//GEN-LAST:event_re_email_txtFocusGained

    private void captcha_txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_captcha_txtFocusGained
        if (evt.getSource() == captcha_txt) {
            crypto.helper.validate validate = new crypto.helper.validate(captcha_txt, captcha_txt.getText(), captcha_form, bundle);
            labelCheck(captcha_check, validate.getVal(), validate.getTooltip());
        }
    }//GEN-LAST:event_captcha_txtFocusGained

    private void labelCheck(JLabel label, boolean set, String tooltip) {

        String icon = set ? "/crypto/images/simple_forms/check.png" : "/crypto/images/simple_forms/uncheck.png";
        label.setIcon(new ImageIcon(getClass().getResource(icon)));
        label.setToolTipText(tooltip);
    }

    private void checkReEmail() {
        crypto.helper.validate validate = new crypto.helper.validate(re_email_txt, re_email_txt.getText(), null, bundle);
        try {
            if (email_txt.getText().equals(re_email_txt.getText()) && !re_email_txt.getText().isEmpty()) {
                labelCheck(re_email_check, true, validate.getTooltip());
            } else {
                labelCheck(re_email_check, false, bundle.getString("key_re_email_check"));
            }
        } catch (NullPointerException e) {
        }
    }

    private void refreshFrame() {
        super.invalidate();
        super.validate();
        super.repaint();
    }

    private void checkLocation(Point location) {
        setPoint = location;
        if (setPoint == null) {
            super.setLocationRelativeTo(null);
        } else {
            super.setLocation(setPoint);
        }
    }

    private void closeWindow() {

        super.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                ImageIcon icon = new ImageIcon(getClass().getResource(config.getIconPath()));
                if (JOptionPane.showConfirmDialog(windowEvent.getWindow(),
                        bundle.getString("key_msg_close"), bundle.getString("key_msg_close_title"),
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, icon
                ) == JOptionPane.YES_OPTION) {
                    System.exit(0);
                    if (key_panel != null) {
                        key_panel.dispose();
                    }
                }
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            javax.swing.UIManager.setLookAndFeel(new SyntheticaBlackEyeLookAndFeel());
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    final Locale RO = new Locale("ro", "Romania");
                    final Locale EN = new Locale("en", "US");
                    ResourceBundle bundle = ResourceBundle.getBundle("crypto/helper/lang_en", EN);
                    new acc(setPoint, bundle).setVisible(true);
                }
            });
        } catch (UnsupportedLookAndFeelException | ParseException ex) {
            Logger.getLogger(acc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static String location_key;
    private static Point setPoint;
    private createKey key_panel;
    private final configApp config = new configApp();
    private static ResourceBundle bundle;
    private boolean name = false, email = false, re_email = false, captcha = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JLabel captcha_check;
    private crypto.captcha.captcha_form captcha_form;
    private javax.swing.JTextField captcha_txt;
    private crypto.helper.createAcc_bg createAcc_bg1;
    private javax.swing.JLabel email_check;
    private javax.swing.JTextField email_txt;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JCheckBox jbox_agree;
    private javax.swing.JButton jcreate_key;
    private javax.swing.JButton jrefresh_captcha;
    private javax.swing.JLabel jtitle;
    private javax.swing.JLabel key;
    private javax.swing.JButton key_store;
    private javax.swing.JLabel name_check;
    private javax.swing.JTextField name_txt;
    private javax.swing.JLabel re_email_check;
    private javax.swing.JTextField re_email_txt;
    private javax.swing.JButton sign_up;
    // End of variables declaration//GEN-END:variables

    @Override
    public void check_store(String path) {
        location_key = path;
        String check_crt = location_key.substring(location_key.length() - 3);
        if (check_crt.equals("crt")) {
            key_store.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/id_verified.png")));
        } else {
            location_key = null;
            key_store.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/id_not_verified.png")));
        }
    }

    @Override
    public void reset_store() {
        key_store.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crypto/images/simple_forms/inputs.png")));
    }
}
